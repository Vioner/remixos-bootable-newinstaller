#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Last updated 2015/10/23
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/sbin:/bin:/system/bin:/system/xbin; export PATH

# configure debugging output
# Lets modify this to generate log with this data regardless od DEBUG=X.
# But with DEBUG=0/"" it shouldn't have set -x
if [ -n "$DEBUG" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>> $LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc and /sys
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	# let busybox install all applets as symlinks
	busybox --install -s
	# spawn shells on tty 2 and 3 if debug or installer
	if test -n "$DEBUG" || test -n "$INSTALL"; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if test -z "$DEBUG" || test -n "$INSTALL"; then
		echo 0 0 0 0 > /proc/sys/kernel/printk
	fi
	# initialise /dev (first time)
	mkdir -p /dev/block
	echo /sbin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

error()
{
	echo $*
	return 1
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		RW="nolock,$RW"
	fi
	# FIXME: any way to mount ntfs gracefully?
	mount -o $RW,noatime,nodiratime $@ || mount.ntfs-3g -o rw,force $@
}

# region @jide
mount_system_dev_img_if_necessary()
{
	if [ -n "$REMOUNT_RW" ]; then
		[ 0$REMOUNT_RW -eq 0 ] && return
	else
		[ 0$removable -eq 1 ] && return
	fi

	if [ 0$REMOUNT_RW -gt 0 ] || grep -qE "ro.build.type=(userdebug|eng)" /android/system/build.prop; then
		remount_rw
		mount | grep /mnt | grep -q rw || return
		if [ ! -e /mnt/$SRC/system_dev.img ]; then
			echo "extract system.sfs to /mnt/$SRC/system_dev.img for developer to easily adb sync"
			(( pv /sfs/system.img > /mnt/$SRC/system_dev.img )) 2>&1
			[ $? -ne 0 ] && return
		else
			echo "using the existing /mnt/$SRC/system_dev.img for developer to easily adb sync"
		fi
		umount /android/system
		mount -o loop,rw /mnt/$SRC/system_dev.img /android/system
	fi
}
# endregion

check_root()
{
	local r
	if [ "`dirname $1`" = "/dev" ]; then
		[ -e $1 ] || return 1
		blk=`basename $1`
		[ ! -e /dev/block/$blk ] && ln $1 /dev/block
		dev=/dev/block/$blk
		r=$(ls /sys/block/$blk/removable /sys/block/*/$blk/../removable 2>/dev/null)
		[ -n "$r" ] && r=$(cat $r) || r=0
	else
		dev=$1
	fi
	try_mount ro $dev /mnt || return 1
	if [ -n "$iso" -a -e /mnt/$iso ]; then
		mount --move /mnt /iso
		mkdir /mnt/iso
		mount -o loop /iso/$iso /mnt/iso
		SRC=iso
	elif [ ! -e /mnt/$SRC/ramdisk.img ]; then
		return 1
	fi
	removable=$r
	zcat /mnt/$SRC/ramdisk.img | cpio -id > /dev/null
	[ -n "$SYSTEM" ] && blk=`basename $SYSTEM` || blk=
	if [ -b "/dev/$blk" ]; then
		[ ! -e /dev/block/$blk ] && ln /dev/$blk /dev/block
		mount -o ro /dev/block/$blk system
	elif [ -e /mnt/$SRC/system.sfs ]; then
		mount -o loop /mnt/$SRC/system.sfs /sfs
		mount -o loop,ro /sfs/system.img system
		mount_system_dev_img_if_necessary
	elif [ -e /mnt/$SRC/system.img ]; then
		mount -o loop,ro /mnt/$SRC/system.img system
	elif [ -d /mnt/$SRC/system ]; then
		mount --bind /mnt/$SRC/system system
	else
		rm -rf *
		return 1
	fi
	mkdir mnt
	if [ -n "$DEBUG" ]; then
		echo " found at $1"
	fi
	rm /sbin/mke2fs
	hash -r
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo /mnt
}

debug_shell()
{
	if [ -x system/bin/sh ]; then
		echo Running MirBSD Korn Shell...
		USER="($1)" system/bin/sh -l 2>&1
	else
		echo Running busybox ash...
		sh 2>&1
	fi
}

if [ -n "$DEBUG" ]; then
	echo -n Detecting Android-x86...
fi

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`

for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			eval `echo $c | cut -b1-3,18-`
			;;
		*)
			;;
	esac
done

mount -t tmpfs tmpfs /android
cd /android
while :; do
	for device in ${ROOT:-/dev/[hmnsv][dmrv][0-9a-z]*}; do
		check_root $device && break 2
		mountpoint -q /mnt && umount /mnt
	done
	sleep 1
	if [ -n "$DEBUG" ]; then
		echo -n .
	fi
done

ln -s mnt/$SRC /src
ln -s android/system /
ln -s ../system/lib/firmware ../system/lib/modules /lib

if [ -n "$INSTALL" ]; then
	zcat /src/install.img | ( cd /; cpio -iud > /dev/null )
fi

if [ -x system/bin/ln -a \( -n "$DEBUG" -o -n "$BUSYBOX" \) ]; then
	mv /bin /lib .
	sed -i 's|\( PATH.*\)|\1:/bin|' init.environ.rc
	rm /sbin/modprobe
	busybox mv /sbin/* sbin
	rmdir /sbin
	ln -s android/bin android/lib android/sbin /
	hash -r
fi

# ensure keyboard driver is loaded
[ -n "$INSTALL" -o -n "$DEBUG" ] && busybox modprobe -a atkbd hid-apple


# Save native partition path and uuid to files accessible from Android in case if partition is not automounted (often happens, not yet fixed)
echo "native_partition_path = $dev" >> boot_info
echo "native_partition_uuid = "`/system/bin/blkid -s UUID -o value $dev` >> boot_info
echo "native_partition_remix_dir = $SRC" >> boot_info
# If booted from removable storage device
# If any REMIX_OS labeled partition on native boot device found, then set as winfriendly partition path.
usb_boot_win_partition_path=$(/system/bin/blkid -t LABEL="REMIX_OS" -o device ${dev%?}*)
if [[ -n "$usb_boot_win_partition_path" ]]; then	
	echo "usb_boot_win_partition_uuid = "`/system/bin/blkid -s UUID -o value $usb_boot_win_partition_path` >> boot_info
	echo "usb_boot_win_partition_path = $usb_boot_win_partition_path" >> boot_info
fi

# Log dumper
# Need to decide log dumping points - when should it dump?
dump_logs()
{
	# Log naming
	model=$(dmidecode | grep -m 1 "Product Name:" | awk '{print $3}')
	version=$(cat /system/build.prop | grep remixos.version | cut -d= -f2-)
	system_arch=$(uname -a | grep -o 'x86\|x86_64' | head -1)
	dmesg="dmesg_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	lspci="lspci_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	lsusb="lsusb_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	cpuinfo="cpuinfo_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	dmidecode="dmidecode_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	debuglog="debuglog_${boot_step}_${model}_${version}_${system_arch}_$(date +%F_%H-%M).txt"
	
	# Make sure storage writable and set logs path
	mount -o remount,rw /mnt 
	logs_path="/mnt/$SRC/RemixOS_Logs/Automatic"
	mkdir -p $logs_path
	# Remove logs older than 3 days
	find $logs_path -name "*.txt" -type f  -maxdepth 1 -mtime +3 -delete
	
	# Actual dumping 
	dmesg >  $logs_path/$dmesg
	lspci > $logs_path/$lspci
	lsusb > $logs_path/$lsusb
	dmidecode > $logs_path/$dmidecode
	cat /proc/cpuinfo > $logs_path/$cpuinfo
	cat $LOG > $logs_path/$debuglog
	
	# COPY LOGS TO WIN FRIENDLY PARTITION IF BOOTED FROM USB
	if [[ -n "$usb_boot_win_partition_path" ]]; then
		mkdir -p /usb_boot_win_partition && mount $usb_boot_win_partition_path /usb_boot_win_partition
		usb_logs_path="/usb_boot_win_partition/RemixOS_Logs/Automatic" && mkdir -p $usb_logs_path	
		find $usb_logs_path -name "*.txt" -type f  -maxdepth 1 -mtime +3 -delete
		cp $logs_path/$dmesg $usb_logs_path $logs_path/$lspci $usb_logs_path $logs_path/$lsusb $usb_logs_path $logs_path/$cpuinfo $usb_logs_path $logs_path/$dmidecode $usb_logs_path $logs_path/$debuglog $usb_logs_path 2>/dev/null
		# Unmount, because otherwise user won't be able to write to that partition once system loads.
		umount /usb_boot_win_partition
	fi
}



if [ 0$DEBUG -gt 0 ]; then
	# Dump logs right before DEBUG terminal is accessible by user.
	boot_step="AT-DEBUG-SHELL" && dump_logs
	echo -e "\nType 'exit' to continue booting...\n"
	debug_shell debug-found
fi

# load scripts
for s in `ls /scripts/* /src/scripts/*`; do
	test -e "$s" && source $s
done

# A target should provide its detect_hardware function.
# On success, return 0 with the following values set.
# return 1 if it wants to use auto_detect
[ "$AUTO" != "1" ] && detect_hardware && FOUND=1

[ "$INSTALL" -eq 1 ] && do_install
[ "$INSTALL" = "2" -o "$INSTALL" = "PREINSTALL_MBR" -o "$INSTALL" = "PREINSTALL_EFI" ] && do_preinstall

mount_data
load_modules
mount_sdcard
init_remixos
setup_tslib
setup_dpi
post_detect

if [ 0$DEBUG -gt 1 ]; then
	echo -e "\nUse Alt-F1/F2/F3 to switch between virtual consoles"
	echo -e "Type 'exit' to enter Android...\n"

	debug_shell debug-late
fi

[ -n "$DEBUG" ] && SWITCH=${SWITCH:-chroot}

# We must disable mdev before switching to Android
# since it conflicts with Android's init
echo > /proc/sys/kernel/hotplug

export ANDROID_ROOT=/system
# Dump logs right before attempting to load Android.
boot_step="END-OF-INIT" && dump_logs
exec ${SWITCH:-switch_root} /android /init

# avoid kernel panic
while :; do
	echo
	echo '	Android-x86 console shell. Use only in emergencies.'
	echo
	debug_shell fatal-err
done
